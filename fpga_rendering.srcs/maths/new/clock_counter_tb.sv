`default_nettype none
`timescale 1ns / 1ps

import Utils::vec3f;
import Utils::valf;

module clock_counter_tb;

    logic clk;

    logic ma_subtract = 1'b1;
    logic ma_sclr = 1'b0;

    logic ma_start, ma_done, ma_ce;
    valf ma_a, ma_b;
    logic signed [31:-32] ma_c, ma_p;

//    assign ma_p = (ma_a * ma_b) + ma_c;

    // ma_p = ma_a * ma_b - ma_c
    multadd ma (
        .CLK(clk),
        .A(ma_a),
        .B(ma_b),
        .C(ma_c),
        .SUBTRACT(ma_subtract),
        .CE(ma_ce),
        .SCLR(ma_sclr),
        .PCOUT(),
        .P(ma_p)
    );

    clock_counter #(.COUNT(8)) uut (
        .clk,
        .start(ma_start),
        .busy(),
        .done(ma_done),
        .ce(ma_ce),
        .oe()
    );

    initial begin
        clk = 0;
        forever begin
            #5 clk = ~clk;
        end
    end

    initial begin
        ma_a =  (32'd1 << 16);  // 32'b0000000000000010_0000000000000000;
        ma_b =  (32'd1 << 16);  // 32'b0000000000000010_0000000000000000;
        ma_c = 64'b00000000000000000000000000000000_00000000000000000000000000000000;

        ma_start = 1'b1;

        #10;

        ma_start = 1'b0;

        #150;

        ma_a = -(32'd1 << 16);  // 32'b0000000000000010_0000000000000000;
        ma_b =  (32'd1 << 16);  // 32'b0000000000000010_0000000000000000;
        ma_c = 64'b00000000000000000000000000000000_00000000000000000000000000000000;

        ma_start = 1'b1;

        #10;

        ma_start = 1'b0;

        #150;

        ma_a =  (32'd1 << 16);  // 32'b0000000000000010_0000000000000000;
        ma_b = -(32'd1 << 16);  // 32'b0000000000000010_0000000000000000;
        ma_c = 64'b00000000000000000000000000000000_00000000000000000000000000000000;

        ma_start = 1'b1;

        #10;

        ma_start = 1'b0;

        #150;

        ma_a = -(32'd1 << 16);  // 32'b0000000000000010_0000000000000000;
        ma_b = -(32'd1 << 16);  // 32'b0000000000000010_0000000000000000;
        ma_c = 64'b00000000000000000000000000000000_00000000000000000000000000000000;

        ma_start = 1'b1;

        #10;

        ma_start = 1'b0;

        ma_a =  (32'd1 << 16);  // 32'b0000000000000010_0000000000000000;
        ma_b =  (32'd1 << 16);  // 32'b0000000000000010_0000000000000000;
        ma_c = 64'b00000000000000000000000000000001_00000000000000000000000000000000;

        ma_start = 1'b1;

        #10;

        ma_start = 1'b0;

        #150;

        ma_start = 1'b0;

        ma_a =  (32'd2 << 16);  // 32'b0000000000000010_0000000000000000;
        ma_b = -(32'd3 << 16);  // 32'b0000000000000010_0000000000000000;
        ma_c = 64'b00000000000000000000000000000001_00000000000000000000000000000000;

        ma_start = 1'b1;

        #10;

        ma_start = 1'b0;

        #150;
    end

endmodule
